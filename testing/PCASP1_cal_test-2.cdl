netcdf PCASP1_CLARIFY_flowcal {

// This cdl file contains flow calibration data that is applied to CLARIFY data
//
// Instrument: PCASP-1
//
// Some of these fields may be modified/overwritten by cal_ncgen.py.
//
// author = G. Nott
// email = graeme.nott@faam.ac.uk
// creation = Oct 2019

// global attributes:
    
    // Universal global file attributes. Do not modify.
//    :Conventions = "CF-1.6";
//    :NCO = "4.1.3";
//    :_Format = "netCDF-4";
//    :institution = "FAAM. Facility for Airborne Atmospheric Measurements";
//    :address = "Building 146, Cranfield University, Cranfield MK43 0AL UK";

    // Instrument global file attributes. 
//    :title = "FAAM calibration data for the PCASP-1";
//    :source = "Laboratory-based calibration";
//    :instr = "PCASP-1";
//    :instr_long_name = "Passive Cavity Spectrometer Probe. SPP200 electronics package";
//    :instr_serialnumber = "17884-0190-04";
//    :references = "http://www.faam.ac.uk/index.php/science-instruments/aerosol/304-pcasp";
    :comment = "This is a cdl test comment";
// The following global attributes shall be modified by cal_ncgen.py if used
    :username = "Graeme Nott";
    :history = "CLARIFY flow cal, 20180307";


    dimensions:
        time = UNLIMITED ;
        fred = 2;

    variables:
        float time(time);
            time:standard_name = "time";
            time:long_name = "time of fred";
            time:timezone = "UTC";
            time:units = "days since 2019-10-28 00:00:00";
            time:strftime_format = "days since %Y-%m-%d %H:%M:%S%Z";

        float bob(time,fred);
            bob:long_name = "bob number";
            bob:comment2 = "New comment!";

        int alice(time,fred);
            alice:long_name = "Alice number";

    data:
        time = 4;
        bob = 4.1,4.2;
        alice = 42,52;

group: test_grp {
    :title = "Test group";

    dimensions:
        time = UNLIMITED ;

    variables:
        float time(time);
            time:standard_name = "time";
            time:long_name = "time of fred";
            time:timezone = "UTC";
            time:units = "days since 2019-10-28 00:00:00";
            time:strftime_format = "days since %Y-%m-%d %H:%M:%S%Z";

        float test_var(time);
            test_var:long_name = "test of test_grp";
            test_var:comment = "Testing";
 
    data:
        time = 4;
        test_var = 111;
    

    group: testtest_grp {
        :title = "Nested group";

        variables:
            float testtest_var(/test_grp/time);
                testtest_var:long_name = "test of nested testtest_grp";
                testtest_var:comment = "Testing again";
     
        data:
            testtest_var = 222;    
        }
    }


group: flow_cal {
    // Group containing calibration of flow rates of the PCASP
    //
    :title = "Flow calibration of PCASP";
    :comment = "Gilibrator 2 small cell (to 250cc/m) connected to outlet of PCASP1. Small CV needle valve used to throttle inlet flow with inline Alicat flowmeter used to measure T & P of inlet air";
    :references = "http://www.faam.ac.uk/index.php/science-instruments/aerosol/304-pcasp";
    
    // The units of time may be one of days ('d'), hours ('hr', 'h'),
    // minutes ('min'), or seconds ('sec', 's') and the most appropriate unit
    // for the frequency of calibration should be used.
    dimensions:
        time = UNLIMITED ;
        max_flows = 1024;    // Maximum number of different flows in a calibration

    // Define group coordinate variable
    variables:
        float time(time);
            time:standard_name = "time";
            time:long_name = "time of calibration";
            time:timezone = "UTC";
            time:units = "seconds since 1970-01-01 00:00:00";
            time:strftime_format = "seconds since %Y-%m-%d %H:%M:%S%Z";

    // Define group variables
        string applies_to(time);
            applies_to:long_name = "Each calibration applies to these measurements";
            applies_to:comments = "String of applicable flight numbers for each calibration date";

        string descr(time);
            descr:long_name = "Description of calibration";
            descr:comment = "Any descriptive string used as an addition identifier of this calibration";

        string traceability(time);
            traceability:long_name = "Traceability trail for each calibration";
            traceability:comment = "Link to file/s showing traceability of calibration materials and instruments";

        int cal_flag(time);
            cal_flag:long_name = "Flag denoting quality of calibration";
            cal_flag:valid_range = 0, 3;
            cal_flag:flag_values = 0, 1, 2, 3;
            cal_flag:flag_meanings = "good questionable poor missing_or_bad";
            cal_flag:_FillValue = 3;

        float flows_reported(time,max_flows);
            flows_reported:long_name = "Array of flow rates reported by PCASP for each value in flows_actual";
            flows_reported:comment = "The number of different flows included in each calibration will differ depending on operator and circumstance. The maximum possible flows is given by the dimension max_flows. The variable is padded by the _FillValue. It is the users obligation to check that the number of flows_reported for each time is the same as flows_actual for that time.";
            flows_reported:units = "cc/s";
            flows_reported:valid_min = 0;
            flows_reported:_FillValue = NaN;

        float flows_actual(time,max_flows);
            flows_actual:long_name = "Array of measured flow rate for each value in flows_reported";
            flows_actual:comment = "The number of different flows included in each calibration will differ depending on operator and circumstance. The maximum possible flows is given by the dimension max_flows. The variable is padded by the _FillValue. It is the users obligation to check that the number of flows_actual for each time is the same as flows_reported for that time.";
            flows_actual:units = "cc/s";
            flows_actual:valid_min = 0;
            flows_actual:_FillValue = NaN;

        string flow_fit(time);
            flow_fit:long_name = "Calibration equation of sample flow.";
            flow_fit:comment = "String of equation used to convert reported flow to calibrated flow rate. This will involve a fit to the data given for the same time stamp in the flows variable. A string is used for flexibility but may be changed to polynomial values in the future if appropriate.";
        flow_fit:_FillValue = "";
    

    data:
        // Data is comma-delineated with no additional deliniation between 
        // dimensions. Thus the data is presented flattened with the overall 
        // length being d1*d2*..dn. As specified in the variable definition,
        // the dimensions are cycled over in reverse order so for multi-
        // dimensional arrays, the last dimension varies fastest. Thus, 
        // row-order rather than column order is used for matrices.. If 
        // var = np.array([[11,12,13],[21,22,23]]) then var.flatten() or 
        // np.ravel(var) will write the array in the correct way.

        time = 1572220800;
        applies_to = "C027-C055";
        descr = "CLARIFY flow-cal";
        traceability = "Gilibrator calibration certificate number here";
        cal_flag = 0;
        flows_reported = 1.318, 
                         1.222,
                         1.059,
                         0.927,
                         0.734,
                         0.591,
                         0.490,
                         0.416,
                         0.305,
                         0.237,
                         0.187,
                         0.106;
        flows_actual =   1.142,
                         1.046,
                         0.911,
                         0.791,
                         0.625,
                         0.502,
                         0.409,
                         0.342,
                         0.237,
                         0.168,
                         0.111,
                         0.000;
        flow_fit = "0.231*x**3 - 0.586*x**2 + 1.332*x - 0.125";

    } // End group flow_cal

       

} // EOF
